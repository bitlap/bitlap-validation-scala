name: Scala CI

on:
  push:
    branches:
      - master
    tags: [ "*" ]
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scala: [ 2.13.13, 3.3.1]
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'sbt'
    - name: Build
      run: sbt ++${{matrix.scala}} compile
      
  examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scala: [ 3.3.1]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'sbt'
      - name: Build Examples
        run: sbt ++${{matrix.scala}} examples/compile      

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scala: [ 2.13.13, 3.3.1]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'sbt'
      - name: Run tests
        run: sbt ++${{matrix.scala}} test

  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'sbt'
      - name: Checking Code style
        run: sbt check

  ci:
    runs-on: ubuntu-latest
    needs: [ build, test, lint ]
    steps:
      - name: Aggregate outcomes
        run: echo "build succeeded"      

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v10
      - run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}